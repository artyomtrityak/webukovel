// *************************************************************************
//
//   Helpers
//   -> Extends, Functions, Mixins, Animations
//
// *************************************************************************

//======================================
//   Extends
//======================================

// clearfix
%clearfix:after {
  content:"";
  display:table;
  clear:both;
}

// hide text
%hidden-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// break long words
%break-words {
  word-wrap: break-word;
  overflow-wrap: breakword;
}

// display overflowed text with '...'
%ellipsis {
  white-space: nowrap;
  overflow: hidden;
  -ms-text-overflow: ellipsis;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
}

// icon
%icon {
  display: inline-block;
  vertical-align: middle;
  position: relative;
}


//======================================
//   Functions
//======================================

// Flexible grid
@function span($columns, $container-columns: $fg-max-columns) {
  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;
  $total-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($width / $total-width);
}

// Flexible gutter
@function gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {
  $total-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($gutter / $total-width);
}

// returns percentage value relative to the container width (by default) or the second argument
@function pc($width, $context: $container-width) {
  @return percentage($width / $context);
}

// Add percentage of white to a color
@function tint($color, $percent) {
  @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent) {
  @return mix(black, $color, $percent);
}

// Convert pixels to ems
@function em($pxval, $base: $base-font-size) {
  @return ($pxval / $base) * 1em;
}


//======================================
//   Mixins
//======================================

// Breakpoints for media queries (Libsass version)
@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{map-get($breakpoints, $name)} {
      @content;
    }
  } @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}

// Retina screens media query
@mixin retina($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-resolution: round($ratio * 96dpi)),
  only screen and (min-resolution: $ratio * 1dppx) {
    @content;
  }
}

// @font-face
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix')     format('embedded-opentype'),
    // url('#{$file-path}.woff2')               format('woff2'),
    url('#{$file-path}.woff')                format('woff'),
    url('#{$file-path}.ttf')                 format('truetype'),
    url('#{$file-path}.svg##{$font-family}') format('svg');
  }
}

// placeholder attribute style
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// creates a visual triangle
// the $size argument can take one or two values â€” width height
@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {

    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-bottom: $height solid $foreground-color;

    } @else if $direction == right {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;

    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    } @else if $direction == left {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;

    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;

    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
}

// set button :hover and :active
@mixin button-state($base-color, $stop-color: false, $offset: 0) {
  @if $stop-color == false {
    background-color: $base-color;
  } @else {
    @include gradient-vertical($base-color, $stop-color);
  }

  &:hover:not(:disabled) {
    $base-color-hover: '';
    $stop-gradient-hover: '';

    @if lightness($base-color) > 50% {
      $base-color-hover: adjust-color($base-color, $saturation: -4%, $lightness: -5%);
      @if $stop-color != false {
        $stop-gradient-hover: adjust-color($stop-color, $saturation: -4%, $lightness: -5%);
      }
    } @else {
      $base-color-hover: adjust-color($base-color, $saturation: 4%, $lightness: 5%);
      @if $stop-color != false {
        $stop-gradient-hover: adjust-color($stop-color, $saturation: 4%, $lightness: 5%);
      }
    }

    text-decoration: none;

    @if $stop-color == false {
      background-color: $base-color-hover;
    } @else {
      @include gradient-vertical($base-color-hover, $stop-gradient-hover);
    }
  }

  &:active:not(:disabled) {
    $inset-shadow-active: '';

    @if lightness($base-color) > 50% {
      $inset-shadow-active: adjust-color($base-color, $saturation: 7%, $lightness: -20%);
    } @else {
      $inset-shadow-active: adjust-color($base-color, $saturation: 7%, $lightness: -10%);
    }

    @if $offset > 0 {
      transform: translateY($offset + px);
    }

    box-shadow: inset 0 1px 6px 2px $inset-shadow-active;
  }
}

// Horizontal gradient, from left to right
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent);
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent);
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

// Vertical gradient, from top to bottom
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

// sprite mixin
@mixin sprite-2x($sprite1x, $sprite2x) {
  @include sprite($sprite1x);
  @include retina() {
    @include sprite-image($sprite2x);
    background-size: nth($sprite1x, 7) nth($sprite1x, 8);
  }
}


//======================================
//   Animations
//======================================
@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
    transform: translate3d(0,0,0);
  }

  40%, 43% {
    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transform: translate3d(0, -30px, 0);
  }

  70% {
    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transform: translate3d(0, -15px, 0);
  }

  90% {
    transform: translate3d(0,-4px,0);
  }
}
